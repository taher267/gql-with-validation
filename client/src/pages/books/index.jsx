import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { Inter } from "next/font/google";
import { gql, useMutation, useQuery } from "@apollo/client";
import Modal from "@/components/Modal";
import React from "react";
// import { client } from "@/context/ApolloWrapper";
const inter = Inter({ subsets: ["latin"] });
const GET_BOOKS = gql`
  query getBooks {
    books {
      id
      author
      title
    }
  }
`;

const ADD_BOOKS = gql`
  mutation addBook($newBook: InputBook!) {
    addBook(newBook: $newBook) {
      id
      title
      author
    }
  }
`;
export default function Book() {
  const [open, setOpen] = React.useState(false);
  const { data } = useQuery(GET_BOOKS);
  const [mutationFunc, { data: newData, loading, error }] = useMutation(
    ADD_BOOKS,
    {
      update(cache, { data: { addBook } }) {
        cache.modify({
          fields: {
            books(existingBooks = []) {
              const newTodoRef = cache.writeFragment({
                data: addBook,
                fragment: gql`
                  fragment A on B {
                    title
                    author
                  }
                `,
              });
              return [newTodoRef, ...existingBooks];
            },
          },
        });
      },
    }
  );
  // console.log(newData);
  const onSubmit = (e) => {
    e.preventDefault();
    const myFormData = new FormData(e.target);
    const newBook = {};
    myFormData.forEach((value, key) => (newBook[key] = value));
    mutationFunc({ variables: { newBook } });
  };
  const closeHandler = () => setOpen((p) => !p);
  const changeHandler = ({ target }) =>
    setValues({ [target.name]: target.value });
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          <button onClick={closeHandler}>Add New Book</button>
          <Modal {...{ open, closeHandler }}>
            <h3>New Book</h3>
            <div style={{ width: "100%" }}>
              <form
                onSubmit={onSubmit}
                style={{
                  width: "100%",
                  display: "flex",
                  flexWrap: "wrap",
                  //   flexDirection: "row",
                  flexGrow: 1,
                  gap: "20px",
                  margin: "auto",
                }}
              >
                <input
                  required
                  style={{
                    flexBasis: "200px",
                    maxWidth: "100%",
                    // marginBottom: "15px",
                    minHeight: "40px",
                  }}
                  //   onChange={changeHandler}
                  type="text"
                  name="title"
                  placeholder="Title"
                />

                <input
                  required
                  style={{
                    flexBasis: "200px",
                    maxWidth: "100%",
                    // marginBottom: "15px",
                    minHeight: "40px",
                  }}
                  //   onChange={changeHandler}
                  type="text"
                  name="author"
                  placeholder="Author"
                />

                <button
                  type="submit"
                  style={{ height: "40px", flexBasis: "200px" }}
                >
                  Submit
                </button>
              </form>
            </div>
          </Modal>
          <h2>Books</h2>
          <div>
            {data?.books?.map?.((book, i) => {
              return (
                <div key={i} style={{ display: "flex" }}>
                  {/* <p>{book.id}</p> */}
                  {`=>`}
                  <p>{book.title}</p>
                  {`=>`}
                  <p>{book.author}</p>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}
// export async function getStaticProps() {

//   const {
//     data: { books },
//   } = await client.query({
//     query: GET_BOOKS,
//   });

//   return {
//     props: {
//       books,
//     },
//   };
// }
